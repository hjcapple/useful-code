#!/usr/bin/python
# -*- coding: UTF-8 -*- 

import sys
import os

this_dir = os.path.split(os.path.realpath(__file__))[0]
script_name = os.path.split(sys.argv[0])[1]
source_path = os.path.join(this_dir, "StaticCheckTable.h")

source_template = """
// clang-format off
// This file is generated by {script_name}, DO NOT EDIT!

#pragma once

#define static_check_concat_(A, B) A##B
#define static_check_concat(A, B) static_check_concat_(A, B)

#define static_check_table_0(tableName, typeName)
{marcos}
#define static_check_table(tableName, N, typeName)                                    \\
    static_assert(sizeof(tableName) / sizeof(tableName[0]) == N, "wrong table size"); \\
    static_check_concat(static_check_table_, N)(tableName, typeName);
"""

macro_template = """
#define static_check_table_{this_N}(tableName, typeName) \\
    static_check_table_{prev_N}(tableName, typeName);    \\
    static_assert(static_cast<int>(infos[{prev_N}].typeName) == {prev_N}, "wrong type");
"""

N = 20
marcos = ""
for i in range(1, N):
    marco = macro_template.format(this_N = str(i), prev_N = str(i - 1))
    marcos = marcos + marco
    
source = source_template.format(script_name = script_name, marcos = marcos)
with open(source_path, 'w') as f:
    f.write(source)

